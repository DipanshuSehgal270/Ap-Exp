Que - 102 - Binary tree level order traversal
sol - 
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>(); 

        if(root == null)
        {
            return ans;
        }
        q.add(root);

        while(!q.isEmpty())
        {
            int size = q.size();
            List<Integer> level = new ArrayList<>();

            for(int i=0;i<size;i++)
            {
                TreeNode node = q.poll();
               
                level.add(node.val);

                if (node.left != null) {
                    q.add(node.left);
                }
                if (node.right != null) {
                    q.add(node.right);
                }
            }
            ans.add(level);
        }
        return ans;
    }
}

Que - Convert sorted array to binary search tree
sol -
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        if (nums == null || nums.length == 0) return null; 
        return constructBST(nums, 0, nums.length - 1);
    }

    private TreeNode constructBST(int[] nums, int left, int right) {
        if (left > right) return null; 
        
        int mid = left + (right - left) / 2; 
        TreeNode root = new TreeNode(nums[mid]);

        root.left = constructBST(nums, left, mid - 1);  
        root.right = constructBST(nums, mid + 1, right); 
        
        return root;
    }

    public void inorderTraversal(TreeNode root) {
        if (root != null) {
            inorderTraversal(root.left);
            System.out.print(root.val + " ");
            inorderTraversal(root.right);
        }
    }
}

Que - Binary tree inorder traversal
sol - 
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        Stack<TreeNode> stack = new Stack<>();
        List<Integer> ans = new ArrayList<>();
        TreeNode node = root;

        while (node != null || !stack.isEmpty()) {
            while (node != null) {
                stack.push(node);
                node = node.left; 
            }

            node = stack.pop();
            ans.add(node.val);

            node = node.right;
        }

        return ans;
    }
}

Que - populating next right pointers in each node
sol - 
class Solution {
    public Node connect(Node root) {
        if (root == null) return null;

        Node leftmost = root; 
        
        while (leftmost != null && leftmost.left != null) { 
            Node current = leftmost;
            
            while (current != null) { 
                current.left.next = current.right;  
                
                if (current.next != null) {  
                    current.right.next = current.next.left;  
                }
                
                current = current.next;  
            }
            
            leftmost = leftmost.left;  
        }
        
        return root;
    }

    public void printNextPointers(Node root) {
        while (root != null) {
            Node curr = root;
            while (curr != null) {
                System.out.print(curr.val + " -> ");
                curr = curr.next;
            }
            System.out.println("null"); 
            root = root.left; 
        }
    }

}
