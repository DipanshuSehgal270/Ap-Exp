#347 -- Top K Frequent Elements 

CODE - 

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        HashMap<Integer, Integer> freq = new HashMap<>();
        for (int num : nums) {
            freq.put(num, freq.getOrDefault(num, 0) + 1);
        }

        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b) -> freq.get(a) - freq.get(b));

        for(int l : freq.keySet())
        {
            pq.add(l);
            if(pq.size()>k)
            {
                pq.poll();
            }
        } 

        int[] result = new int[k];
        for(int i=0;i<k;i++)
        {
            result[i] = pq.poll(); 
        }

        return result;
    }
}

OUTPUT - 

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

Input: nums = [1], k = 1
Output: [1]


#215 - Kth Largest Element in the Array 

CODE -

class Solution {
    public int findKthLargest(int[] nums, int k) {

        PriorityQueue<Integer> pq = new PriorityQueue<>();

        for (int num : nums) {
            pq.add(num);  
            if (pq.size() > k) {
                pq.poll(); 
            }
        }

        return pq.peek();
    }
}

OUTPUT - 

Input: nums = [3,2,1,5,6,4], k = 2
Output: 5

Input: nums = [3,2,3,1,2,4,5,5,6], k = 4
Output: 4
